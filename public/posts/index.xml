<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on Linux/FOSS and beyond</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Linux/FOSS and beyond</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Nov 2024 08:36:38 +0100</lastBuildDate><atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" /><icon>http://localhost:1313/img/icon.svg</icon>
    
    
    <item>
      <title>Zellij Fedora Cargo</title>
      <link>http://localhost:1313/posts/zellij-fedora-cargo/</link>
      <pubDate>Wed, 13 Nov 2024 08:36:38 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/zellij-fedora-cargo/</guid>
      <description><![CDATA[<h1 id="how-to-install-zellij-on-fedora-linux-using-cargo">How to install zellij on Fedora Linux using cargo</h1>
<p>As it is said on zellij <a href="https://zellij.dev/">webiste</a>:</p>
<blockquote>
<p>Zellij is a terminal workspace. It has the base functionality of a terminal multiplexer (similar to tmux or screen) but includes many built-in features that would allow users to extend it and create their own personalized environment.</p>
</blockquote>
<p>So, if you&rsquo;re looking for a modern screen or tmux replacement look no further.</p>
<h1 id="installation">Installation</h1>
<p>To get the latest version, it is best to install directly from cargo and in order to do so on Fedora Linux, we need to install some dependencies.</p>
<ol>
<li>First, install cargo using <a href="https://rustup.rs">rustup</a>:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>curl --proto <span style="color:#e6db74">&#39;=https&#39;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh
</span></span></code></pre></div><ol start="2">
<li>Then, install development dependencies using dnf:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo dnf group install c-development development-tools
</span></span></code></pre></div><ol start="3">
<li>In order to build <em>zellij</em> from cargo, we also need two perl libraries:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>sudo dnf install perl-FindBin perl-IPC-Cmd
</span></span></code></pre></div><ol start="4">
<li>Finnaly:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>cargo install --locked zellij
</span></span></code></pre></div><p>Now grab a cup of cofee ‚òïÔ∏è and wait while it builds.</p>
<h1 id="conclusion">Conclusion</h1>
<p>I hope that you find this short post usefull. Happy hacking! üë©‚Äçüíª</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Resolving &#39;Cannot access a disposed context instance&#39; Error in ASP.NET Core</title>
      <link>http://localhost:1313/posts/hot-choco-error-post/</link>
      <pubDate>Thu, 17 Oct 2024 12:00:00 +0100</pubDate>
      
      <guid>http://localhost:1313/posts/hot-choco-error-post/</guid>
      <description><![CDATA[<h2 id="introduction">Introduction</h2>
<p>When developing an ASP.NET Core application and using Entity Framework (especially when using HotChocolate GraphQL library) to manage your database, you may encounter the following error:</p>
<pre tabindex="0"><code>Cannot access a disposed context instance. A common cause of this error is disposing a context instance that was resolved from dependency injection and then later trying to use the same context instance elsewhere in your application.
</code></pre><h2 id="cause">Cause</h2>
<p>This error typically occurs when a database context (<code>DbContext</code>) is attempted to be used after it has been disposed. This often happens in scenarios where the <code>DbContext</code> instance is not properly managed within your Dependency Injection (DI) system.</p>
<h2 id="solution">Solution</h2>
<h3 id="use-the-factory-pattern">Use the Factory Pattern</h3>
<p>The solution to this error is to use factory pattern to create a new instance of the <code>DbContext</code> each time it is needed. This way, you can avoid issues with managing the lifecycle of instances.</p>
<ol>
<li>
<p><strong>Register the Factory in the DI Container</strong>:</p>
<p>In your <code>Program.cs</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> connectionString = builder.Configuration.GetConnectionString(<span style="color:#e6db74">&#34;DefaultConnection&#34;</span>);
</span></span><span style="display:flex;"><span>builder.Services..AddDbContextFactory&lt;LibreBorrDbContext&gt;(options =&gt; {
</span></span><span style="display:flex;"><span>        options.UseSqlServer(connectionString); <span style="color:#75715e">// or whatever DB server you are using</span>
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div></li>
<li>
<p><strong>Use the Factory in Your Service</strong>:</p>
<p>In your service (<code>BookService</code>):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">BookService</span> : IBookService
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">readonly</span> IDbContextFactory _dbContextFactory;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> BookService(IDbContextFactory dbContextFactory)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        _dbContextFactory = dbContextFactory;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;List&lt;Book&gt;&gt; GetBooks()
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> <span style="color:#66d9ef">using</span> var context = _dbContextFactory.CreateDbContext();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">await</span> context.Books.ToListAsync();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div></li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Using the factory pattern for managing <code>DbContext</code> instances allows you to avoid issues with disposal and lifecycle management of the context. This method provides greater control over the context and helps you eliminate errors like <code>Cannot access a disposed context instance</code>.</p>
<p>If you have any further questions or need assistance, feel free to reach out! üòä</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Splitcat: My File Splitting and Merging App</title>
      <link>http://localhost:1313/posts/splitcat-post/</link>
      <pubDate>Wed, 16 Oct 2024 04:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/splitcat-post/</guid>
      <description><![CDATA[<h1 id="splitcat-an-app-for-easy-file-splitting-and-merging">Splitcat: An App for Easy File Splitting and Merging</h1>
<p>I‚Äôm excited to introduce my latest project ‚Äì <strong>Splitcat</strong>! üéâ After a lot of work, the app is now <strong>fully developed in Flutter</strong> and ready for download on <a href="https://github.com/vogonwann/splitcat">GitHub</a> and <a href="https://flathub.org/apps/details/lol.janjic.Splitcat">Flathub</a>.</p>
<hr>
<h2 id="about-the-app">About the App</h2>
<p>Splitcat is built entirely in <strong>Flutter</strong>, ensuring a smooth and responsive user experience on both desktop and mobile platforms. It simplifies <strong>file splitting and merging</strong>, making it easier to manage large files without needing complex command-line tools.</p>
<p>Some typical use cases include:</p>
<ul>
<li><strong>Splitting large files</strong> into smaller chunks for sharing via email or uploading to platforms with size limits.</li>
<li><strong>Merging chunks back</strong> into the original file seamlessly.</li>
</ul>
<p>With <strong>ARM64 support</strong>, Splitcat runs perfectly on <strong>Linux phones</strong> like those with <strong>postmarketOS</strong> or <strong>mobian</strong>.</p>
<hr>
<h2 id="key-features">Key Features</h2>
<ul>
<li><strong>Preset and Custom Split Options:</strong> Choose predefined chunk sizes for specific apps or create your own.</li>
<li><strong>Simple and Intuitive UI:</strong> Designed with a minimal layout, including large buttons for easy navigation, especially on smaller screens.</li>
<li><strong>Multi-Platform Support:</strong> Flutter enables compatibility across desktops and Linux phones alike.</li>
<li><strong>Flatpak Package:</strong> Available on <a href="https://flathub.org/">Flathub</a> for hassle-free installation on various Linux distributions.</li>
</ul>
<hr>
<h2 id="installation">Installation</h2>
<p><strong>From Flathub:</strong><br>
Install the app with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>flatpak install flathub lol.janjic.Splitcat
</span></span></code></pre></div><p><strong>From GitHub:</strong>
Alternatively, download the source code or binaries directly from <a href="https://github.com/vogonwann/splitcat/releases">GitHub</a>.</p>
]]></description>
      
    </item>
    
    
    
    <item>
      <title>Introduction</title>
      <link>http://localhost:1313/posts/intro-post/</link>
      <pubDate>Thu, 03 Oct 2024 18:13:42 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/intro-post/</guid>
      <description><![CDATA[<h1 id="welcome-to-the-geek-side-linux-foss-and-all-things-open-source">Welcome to the Geek Side: Linux, FOSS, and All Things Open Source</h1>
<p>Greetings, fellow nerds, coders, and open-source enthusiasts! üëã</p>
<p>Welcome to my humble corner of the internet, where we celebrate the beauty of <strong>Linux</strong>, embrace the power of <strong>Free and Open Source Software (FOSS)</strong>, and dive deep into the art of <strong>coding</strong>. Whether you&rsquo;re a seasoned command-line wizard or a brave soul just starting your Linux journey, this blog is for you.</p>
<h2 id="what-to-expect">What to Expect?</h2>
<ul>
<li><strong>Linux Tips &amp; Tricks</strong>: From obscure terminal commands to desktop customization magic, we&rsquo;ve got you covered.</li>
<li><strong>FOSS Adventures</strong>: Let&rsquo;s explore the wild world of open-source software and the unsung heroes behind it.</li>
<li><strong>Mobile Linux</strong>: Because who doesn‚Äôt want a phone that respects your freedom? (Looking at you, PinePhone and postmarketOS).</li>
<li><strong>Coding Shenanigans</strong>: Python, Rust, C#, Bash, and the occasional &ldquo;How the heck did I break my build again?&rdquo; moment. No language is safe.</li>
</ul>
<h2 id="why-linux">Why Linux?</h2>
<p>Linux isn‚Äôt just an operating system‚Äîit&rsquo;s a way of life! It‚Äôs about freedom, community, and occasionally spending an entire weekend fixing Wi-Fi drivers. But hey, who needs sleep when you can have a perfectly configured system running on <em>your</em> terms?</p>
<h2 id="join-the-fun">Join the Fun!</h2>
<p>I‚Äôll be sharing my experiences, frustrations (because let‚Äôs be honest, there will be plenty), and cool discoveries along the way. If you love tech, open-source, and a bit of lighthearted nerdiness, you‚Äôre in the right place.</p>
<p>Pull up a terminal, grab a cup of your favorite beverage (mine‚Äôs coffee ‚òï), and let‚Äôs get started!</p>
<p>Stay tuned, and remember: With great power comes great responsibility&hellip; and probably some dependency hell.</p>
<p>‚Äî <em>Ivan</em></p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
